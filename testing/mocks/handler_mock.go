// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/evg4b/uncors/internal/contracts.Handler -o handler_mock.go -n HandlerMock -p mocks

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	mm_contracts "github.com/evg4b/uncors/internal/contracts"
	"github.com/gojuno/minimock/v3"
)

// HandlerMock implements mm_contracts.Handler
type HandlerMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcServeHTTP          func(writer mm_contracts.ResponseWriter, request *mm_contracts.Request)
	funcServeHTTPOrigin    string
	inspectFuncServeHTTP   func(writer mm_contracts.ResponseWriter, request *mm_contracts.Request)
	afterServeHTTPCounter  uint64
	beforeServeHTTPCounter uint64
	ServeHTTPMock          mHandlerMockServeHTTP
}

// NewHandlerMock returns a mock for mm_contracts.Handler
func NewHandlerMock(t minimock.Tester) *HandlerMock {
	m := &HandlerMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ServeHTTPMock = mHandlerMockServeHTTP{mock: m}
	m.ServeHTTPMock.callArgs = []*HandlerMockServeHTTPParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mHandlerMockServeHTTP struct {
	optional           bool
	mock               *HandlerMock
	defaultExpectation *HandlerMockServeHTTPExpectation
	expectations       []*HandlerMockServeHTTPExpectation

	callArgs []*HandlerMockServeHTTPParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// HandlerMockServeHTTPExpectation specifies expectation struct of the Handler.ServeHTTP
type HandlerMockServeHTTPExpectation struct {
	mock               *HandlerMock
	params             *HandlerMockServeHTTPParams
	paramPtrs          *HandlerMockServeHTTPParamPtrs
	expectationOrigins HandlerMockServeHTTPExpectationOrigins

	returnOrigin string
	Counter      uint64
}

// HandlerMockServeHTTPParams contains parameters of the Handler.ServeHTTP
type HandlerMockServeHTTPParams struct {
	writer  mm_contracts.ResponseWriter
	request *mm_contracts.Request
}

// HandlerMockServeHTTPParamPtrs contains pointers to parameters of the Handler.ServeHTTP
type HandlerMockServeHTTPParamPtrs struct {
	writer  *mm_contracts.ResponseWriter
	request **mm_contracts.Request
}

// HandlerMockServeHTTPOrigins contains origins of expectations of the Handler.ServeHTTP
type HandlerMockServeHTTPExpectationOrigins struct {
	origin        string
	originWriter  string
	originRequest string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmServeHTTP *mHandlerMockServeHTTP) Optional() *mHandlerMockServeHTTP {
	mmServeHTTP.optional = true
	return mmServeHTTP
}

// Expect sets up expected params for Handler.ServeHTTP
func (mmServeHTTP *mHandlerMockServeHTTP) Expect(writer mm_contracts.ResponseWriter, request *mm_contracts.Request) *mHandlerMockServeHTTP {
	if mmServeHTTP.mock.funcServeHTTP != nil {
		mmServeHTTP.mock.t.Fatalf("HandlerMock.ServeHTTP mock is already set by Set")
	}

	if mmServeHTTP.defaultExpectation == nil {
		mmServeHTTP.defaultExpectation = &HandlerMockServeHTTPExpectation{}
	}

	if mmServeHTTP.defaultExpectation.paramPtrs != nil {
		mmServeHTTP.mock.t.Fatalf("HandlerMock.ServeHTTP mock is already set by ExpectParams functions")
	}

	mmServeHTTP.defaultExpectation.params = &HandlerMockServeHTTPParams{writer, request}
	mmServeHTTP.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmServeHTTP.expectations {
		if minimock.Equal(e.params, mmServeHTTP.defaultExpectation.params) {
			mmServeHTTP.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmServeHTTP.defaultExpectation.params)
		}
	}

	return mmServeHTTP
}

// ExpectWriterParam1 sets up expected param writer for Handler.ServeHTTP
func (mmServeHTTP *mHandlerMockServeHTTP) ExpectWriterParam1(writer mm_contracts.ResponseWriter) *mHandlerMockServeHTTP {
	if mmServeHTTP.mock.funcServeHTTP != nil {
		mmServeHTTP.mock.t.Fatalf("HandlerMock.ServeHTTP mock is already set by Set")
	}

	if mmServeHTTP.defaultExpectation == nil {
		mmServeHTTP.defaultExpectation = &HandlerMockServeHTTPExpectation{}
	}

	if mmServeHTTP.defaultExpectation.params != nil {
		mmServeHTTP.mock.t.Fatalf("HandlerMock.ServeHTTP mock is already set by Expect")
	}

	if mmServeHTTP.defaultExpectation.paramPtrs == nil {
		mmServeHTTP.defaultExpectation.paramPtrs = &HandlerMockServeHTTPParamPtrs{}
	}
	mmServeHTTP.defaultExpectation.paramPtrs.writer = &writer
	mmServeHTTP.defaultExpectation.expectationOrigins.originWriter = minimock.CallerInfo(1)

	return mmServeHTTP
}

// ExpectRequestParam2 sets up expected param request for Handler.ServeHTTP
func (mmServeHTTP *mHandlerMockServeHTTP) ExpectRequestParam2(request *mm_contracts.Request) *mHandlerMockServeHTTP {
	if mmServeHTTP.mock.funcServeHTTP != nil {
		mmServeHTTP.mock.t.Fatalf("HandlerMock.ServeHTTP mock is already set by Set")
	}

	if mmServeHTTP.defaultExpectation == nil {
		mmServeHTTP.defaultExpectation = &HandlerMockServeHTTPExpectation{}
	}

	if mmServeHTTP.defaultExpectation.params != nil {
		mmServeHTTP.mock.t.Fatalf("HandlerMock.ServeHTTP mock is already set by Expect")
	}

	if mmServeHTTP.defaultExpectation.paramPtrs == nil {
		mmServeHTTP.defaultExpectation.paramPtrs = &HandlerMockServeHTTPParamPtrs{}
	}
	mmServeHTTP.defaultExpectation.paramPtrs.request = &request
	mmServeHTTP.defaultExpectation.expectationOrigins.originRequest = minimock.CallerInfo(1)

	return mmServeHTTP
}

// Inspect accepts an inspector function that has same arguments as the Handler.ServeHTTP
func (mmServeHTTP *mHandlerMockServeHTTP) Inspect(f func(writer mm_contracts.ResponseWriter, request *mm_contracts.Request)) *mHandlerMockServeHTTP {
	if mmServeHTTP.mock.inspectFuncServeHTTP != nil {
		mmServeHTTP.mock.t.Fatalf("Inspect function is already set for HandlerMock.ServeHTTP")
	}

	mmServeHTTP.mock.inspectFuncServeHTTP = f

	return mmServeHTTP
}

// Return sets up results that will be returned by Handler.ServeHTTP
func (mmServeHTTP *mHandlerMockServeHTTP) Return() *HandlerMock {
	if mmServeHTTP.mock.funcServeHTTP != nil {
		mmServeHTTP.mock.t.Fatalf("HandlerMock.ServeHTTP mock is already set by Set")
	}

	if mmServeHTTP.defaultExpectation == nil {
		mmServeHTTP.defaultExpectation = &HandlerMockServeHTTPExpectation{mock: mmServeHTTP.mock}
	}

	mmServeHTTP.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmServeHTTP.mock
}

// Set uses given function f to mock the Handler.ServeHTTP method
func (mmServeHTTP *mHandlerMockServeHTTP) Set(f func(writer mm_contracts.ResponseWriter, request *mm_contracts.Request)) *HandlerMock {
	if mmServeHTTP.defaultExpectation != nil {
		mmServeHTTP.mock.t.Fatalf("Default expectation is already set for the Handler.ServeHTTP method")
	}

	if len(mmServeHTTP.expectations) > 0 {
		mmServeHTTP.mock.t.Fatalf("Some expectations are already set for the Handler.ServeHTTP method")
	}

	mmServeHTTP.mock.funcServeHTTP = f
	mmServeHTTP.mock.funcServeHTTPOrigin = minimock.CallerInfo(1)
	return mmServeHTTP.mock
}

// When sets expectation for the Handler.ServeHTTP which will trigger the result defined by the following
// Then helper
func (mmServeHTTP *mHandlerMockServeHTTP) When(writer mm_contracts.ResponseWriter, request *mm_contracts.Request) *HandlerMockServeHTTPExpectation {
	if mmServeHTTP.mock.funcServeHTTP != nil {
		mmServeHTTP.mock.t.Fatalf("HandlerMock.ServeHTTP mock is already set by Set")
	}

	expectation := &HandlerMockServeHTTPExpectation{
		mock:               mmServeHTTP.mock,
		params:             &HandlerMockServeHTTPParams{writer, request},
		expectationOrigins: HandlerMockServeHTTPExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmServeHTTP.expectations = append(mmServeHTTP.expectations, expectation)
	return expectation
}

// Then sets up Handler.ServeHTTP return parameters for the expectation previously defined by the When method

func (e *HandlerMockServeHTTPExpectation) Then() *HandlerMock {
	return e.mock
}

// Times sets number of times Handler.ServeHTTP should be invoked
func (mmServeHTTP *mHandlerMockServeHTTP) Times(n uint64) *mHandlerMockServeHTTP {
	if n == 0 {
		mmServeHTTP.mock.t.Fatalf("Times of HandlerMock.ServeHTTP mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmServeHTTP.expectedInvocations, n)
	mmServeHTTP.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmServeHTTP
}

func (mmServeHTTP *mHandlerMockServeHTTP) invocationsDone() bool {
	if len(mmServeHTTP.expectations) == 0 && mmServeHTTP.defaultExpectation == nil && mmServeHTTP.mock.funcServeHTTP == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmServeHTTP.mock.afterServeHTTPCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmServeHTTP.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ServeHTTP implements mm_contracts.Handler
func (mmServeHTTP *HandlerMock) ServeHTTP(writer mm_contracts.ResponseWriter, request *mm_contracts.Request) {
	mm_atomic.AddUint64(&mmServeHTTP.beforeServeHTTPCounter, 1)
	defer mm_atomic.AddUint64(&mmServeHTTP.afterServeHTTPCounter, 1)

	mmServeHTTP.t.Helper()

	if mmServeHTTP.inspectFuncServeHTTP != nil {
		mmServeHTTP.inspectFuncServeHTTP(writer, request)
	}

	mm_params := HandlerMockServeHTTPParams{writer, request}

	// Record call args
	mmServeHTTP.ServeHTTPMock.mutex.Lock()
	mmServeHTTP.ServeHTTPMock.callArgs = append(mmServeHTTP.ServeHTTPMock.callArgs, &mm_params)
	mmServeHTTP.ServeHTTPMock.mutex.Unlock()

	for _, e := range mmServeHTTP.ServeHTTPMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmServeHTTP.ServeHTTPMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmServeHTTP.ServeHTTPMock.defaultExpectation.Counter, 1)
		mm_want := mmServeHTTP.ServeHTTPMock.defaultExpectation.params
		mm_want_ptrs := mmServeHTTP.ServeHTTPMock.defaultExpectation.paramPtrs

		mm_got := HandlerMockServeHTTPParams{writer, request}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.writer != nil && !minimock.Equal(*mm_want_ptrs.writer, mm_got.writer) {
				mmServeHTTP.t.Errorf("HandlerMock.ServeHTTP got unexpected parameter writer, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmServeHTTP.ServeHTTPMock.defaultExpectation.expectationOrigins.originWriter, *mm_want_ptrs.writer, mm_got.writer, minimock.Diff(*mm_want_ptrs.writer, mm_got.writer))
			}

			if mm_want_ptrs.request != nil && !minimock.Equal(*mm_want_ptrs.request, mm_got.request) {
				mmServeHTTP.t.Errorf("HandlerMock.ServeHTTP got unexpected parameter request, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmServeHTTP.ServeHTTPMock.defaultExpectation.expectationOrigins.originRequest, *mm_want_ptrs.request, mm_got.request, minimock.Diff(*mm_want_ptrs.request, mm_got.request))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmServeHTTP.t.Errorf("HandlerMock.ServeHTTP got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmServeHTTP.ServeHTTPMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmServeHTTP.funcServeHTTP != nil {
		mmServeHTTP.funcServeHTTP(writer, request)
		return
	}
	mmServeHTTP.t.Fatalf("Unexpected call to HandlerMock.ServeHTTP. %v %v", writer, request)

}

// ServeHTTPAfterCounter returns a count of finished HandlerMock.ServeHTTP invocations
func (mmServeHTTP *HandlerMock) ServeHTTPAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServeHTTP.afterServeHTTPCounter)
}

// ServeHTTPBeforeCounter returns a count of HandlerMock.ServeHTTP invocations
func (mmServeHTTP *HandlerMock) ServeHTTPBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServeHTTP.beforeServeHTTPCounter)
}

// Calls returns a list of arguments used in each call to HandlerMock.ServeHTTP.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmServeHTTP *mHandlerMockServeHTTP) Calls() []*HandlerMockServeHTTPParams {
	mmServeHTTP.mutex.RLock()

	argCopy := make([]*HandlerMockServeHTTPParams, len(mmServeHTTP.callArgs))
	copy(argCopy, mmServeHTTP.callArgs)

	mmServeHTTP.mutex.RUnlock()

	return argCopy
}

// MinimockServeHTTPDone returns true if the count of the ServeHTTP invocations corresponds
// the number of defined expectations
func (m *HandlerMock) MinimockServeHTTPDone() bool {
	if m.ServeHTTPMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ServeHTTPMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ServeHTTPMock.invocationsDone()
}

// MinimockServeHTTPInspect logs each unmet expectation
func (m *HandlerMock) MinimockServeHTTPInspect() {
	for _, e := range m.ServeHTTPMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to HandlerMock.ServeHTTP at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterServeHTTPCounter := mm_atomic.LoadUint64(&m.afterServeHTTPCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ServeHTTPMock.defaultExpectation != nil && afterServeHTTPCounter < 1 {
		if m.ServeHTTPMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to HandlerMock.ServeHTTP at\n%s", m.ServeHTTPMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to HandlerMock.ServeHTTP at\n%s with params: %#v", m.ServeHTTPMock.defaultExpectation.expectationOrigins.origin, *m.ServeHTTPMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcServeHTTP != nil && afterServeHTTPCounter < 1 {
		m.t.Errorf("Expected call to HandlerMock.ServeHTTP at\n%s", m.funcServeHTTPOrigin)
	}

	if !m.ServeHTTPMock.invocationsDone() && afterServeHTTPCounter > 0 {
		m.t.Errorf("Expected %d calls to HandlerMock.ServeHTTP at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ServeHTTPMock.expectedInvocations), m.ServeHTTPMock.expectedInvocationsOrigin, afterServeHTTPCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *HandlerMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockServeHTTPInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *HandlerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *HandlerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockServeHTTPDone()
}
